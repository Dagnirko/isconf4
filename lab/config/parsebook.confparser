#!/usr/bin/python2.3

import re
import string

(START,SECTION) = range(2)

class Conf:

    def __init__(self,string):
        section = {}
        state=START
        name=''
        var={}
        i=0
        for line in string.split('\n'):

            # skip comments
            if re.match('\s*#', line):
                continue
            if re.match('^\s*$', line):
                if state is SECTION:
                    section[name]
                state=START
                name=''
                includes=[]
                continue
            m = re.match('(\S+.*): (.*)',line)
            if m:
                # name: inc1 inc2
                state=SECTION
                name = m.group(1)
                includes = ['DEFAULT'] + m.group(2).split()
                for inc in includes:
                    if not section.has_key(inc):
                        raise ConfigurationError("section not found:
                continue
            if state is SECTION:
                if not re.match('^\s+', line):
                    raise ConfigurationError("syntax error: %s" % line)


def error(line,msg):
    raise ConfigurationError("syntax error: %s" % line)
    

class ConfigurationError(Exception): pass



def getconf(section):
    conf = {}
    for var in config.options(section):
        if var == '.include':
            includes = config.get(section, var).split()
            for include in includes:
                subconf = getconf(include)
                conf.update(subconf)
            continue
        conf[var] = config.get(section, var)
    return conf



config = ConfigParser.ConfigParser()

config.read("book.cfg")

# print summary
print
print string.upper(config.get("book", "title"))
print "by", config.get("book", "author"),
print  "(" + config.get("book", "email") + ")"
print
print config.get("ematter", "pages"), "pages"
print

# dump entire config file
for section in config.sections():
    print section
    conf = getconf(section)
    for (var,val) in conf.items():
        print " ", var, "=", val
